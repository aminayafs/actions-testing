name: CI/CD Pipeline

on: 
  workflow_dispatch: #workflow dispatch is for manual run from actions page
  push: #on push to our release pipeline branches
    branches:      
      - 'dev'
      - 'release-*'
      - 'hotfix-*'
      - 'main'
  pull_request: #on pull request  

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  determine-app-version:
    name: Determine app version
    runs-on: ubuntu-latest
    outputs:
      base-version: ${{ steps.determine-base-version.outputs.BASE_VERSION }}
      build-number: ${{ steps.determine-build-number.outputs.BUILD_NUMBER }}
      version-suffix: ${{ steps.determine-version-suffix.outputs.VERSION_SUFFIX }}
      full-version: ${{ steps.determine-full-version.outputs.FULL_VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine base version
        id: determine-base-version
        run: |
          BASE_VERSION=$(grep 'bundleVersion:' ./ProjectSettings/ProjectSettings.asset | awk '{print $2}')
          
          echo "BASE_VERSION=$BASE_VERSION" >> "$GITHUB_OUTPUT"
          
          echo "Base version: $BASE_VERSION"

      - name: Determine build number
        id: determine-build-number
        run: |
          BUILD_NUMBER="${{ github.run_number }}${{ github.run_attempt }}"
          
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> "$GITHUB_OUTPUT"
          
          echo "Build number: $BUILD_NUMBER"
          
      - name: Determine version suffix
        id: determine-version-suffix
        run: |
          GITHUB_EVENT_NAME="${{ github.event_name }}"
          
          if [[ $GITHUB_EVENT_NAME == 'pull_request' ]]; then
            GITHUB_REF="${{ github.base_ref }}"
          else
            GITHUB_REF="${{ github.ref_name }}"
          fi
          
          if [[ $GITHUB_REF == 'main' ]]; then
            VERSION_SUFFIX="+${{ steps.determine-build-number.outputs.BUILD_NUMBER }}"
          elif [[ $GITHUB_REF =~ ^(release|hotfix)-.* ]]; then
            VERSION_SUFFIX="-rc.${{ steps.determine-build-number.outputs.BUILD_NUMBER }}"
          else
            VERSION_SUFFIX="-dev.${{ steps.determine-build-number.outputs.BUILD_NUMBER }}"
          fi
          
          echo "VERSION_SUFFIX=$VERSION_SUFFIX" >> "$GITHUB_OUTPUT"
          
          echo "Version suffix: $VERSION_SUFFIX"
          
      - name: Determine full version
        id: determine-full-version
        run: |
          FULL_VERSION="${{ steps.determine-base-version.outputs.BASE_VERSION }}${{ steps.determine-version-suffix.outputs.VERSION_SUFFIX }}"
          
          echo "FULL_VERSION=$FULL_VERSION" >> "$GITHUB_OUTPUT"
          
          echo "Full version: $FULL_VERSION"

  run-unit-tests:
    name: Run unit tests in ${{ matrix.test-mode }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test-mode:
          - PlayMode
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Get Unity version
        id: unity-version
        run: |
          UNITY_VERSION=$(grep "m_EditorVersion:" ProjectSettings/ProjectVersion.txt | awk -F ': ' '{print $2}' | tr -d '\r')
          echo "UNITY_VERSION=${UNITY_VERSION}" >> $GITHUB_OUTPUT

      - name: Cache Unity Library
        uses: actions/cache@v4.1.1
        with:
          path: Library/
          key: Unity-Library-Tests-${{ matrix.test-mode }}-${{ runner.os }}-${{ hashFiles('Packages/**') }}-${{ hashFiles('ProjectSettings/**') }}-${{ hashFiles('Assets/**') }}
          restore-keys: |
            Unity-Library-Tests-${{ matrix.test-mode }}-${{ runner.os }}-${{ hashFiles('Packages/**') }}-${{ hashFiles('ProjectSettings/**') }}
            Unity-Library-Tests-${{ matrix.test-mode }}-${{ runner.os }}-${{ hashFiles('Packages/**') }}
            Unity-Library-Tests-${{ matrix.test-mode }}-${{ runner.os }}

      - name: Cache UPM dependencies
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/upm-cache
          key: upm-cache-${{ inputs.target-platform }}-${{ hashFiles('Packages/manifest.json', 'Packages/packages-lock.json', 'Packages/nuget-packages/NuGet.config', 'Packages/nuget-packages/package.json', 'Packages/nuget-packages/packages.config') }}
          restore-keys: |
            upm-cache-${{ inputs.target-platform }}-

      - name: Cache Unity Installation
        id: cache-unity
        uses: actions/cache@v4
        with:
          path: |
            /opt/unityhub
            /home/runner/Unity/Hub/Editor/${{ steps.unity-version.outputs.UNITY_VERSION }}/Editor
            !/home/runner/Unity/Hub/Editor/${{ steps.unity-version.outputs.UNITY_VERSION }}/Editor/Data/Resources/Licensing
          key: unity-editor-${{ runner.os }}-${{ steps.unity-version.outputs.UNITY_VERSION }}
      
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.x'

      - name: Install NugetForUnity CLI tool
        run: dotnet tool install --global NuGetForUnity.Cli

      - name: Restore NugetForUnity packages
        run: nugetforunity restore .

      - name: Setup Unity
        if: steps.cache-unity.outputs.cache-hit != 'true'
        id: unity-setup
        uses: buildalon/unity-setup@v1
        with:
          version-file: './ProjectSettings/ProjectVersion.txt'
          modules: linux-server

      # - name: Create Unity License Service Config
      #   run: |
      #     sudo mkdir -p /usr/share/unity3d/config/
      #     cat << EOF > services-config.json
      #     {
      #       "licensingServiceBaseUrl": "${{ vars.UNITY_LICENSE_SERVER_URL }}",
      #       "enableEntitlementLicensing": true,
      #       "hubEnableWorkOffline": true,
      #       "clientConnectTimeoutSec": 60,
      #       "clientHandshakeTimeoutSec": 30
      #     }
      #     EOF
      #     sudo cp services-config.json /usr/share/unity3d/config/
      #     sudo chmod 644 /usr/share/unity3d/config/services-config.json

      # - name: Acquire Unity floating license
      #   id: acquire-license
      #   run: |
      #     output=$(/opt/unityhub/UnityLicensingClient_V1/Unity.Licensing.Client --acquire-floating)
      #     echo "$output"
      #     LICENSETOKEN=$(echo "$output" | grep -oP 'token: "\K[^"]+')
      #     echo "LICENSETOKEN=$LICENSETOKEN" >> $GITHUB_OUTPUT

      # - name: Run Unity Tests
      #   id: unity-tests
      #   uses: buildalon/unity-action@v1.0.3
      #   with:
      #     editor-path: '/home/runner/Unity/Hub/Editor/${{ steps.unity-version.outputs.UNITY_VERSION }}/Editor/Unity'
      #     project-path: ${{ github.workspace }}
      #     log-name: '${{ matrix.test-mode }}Test-Results'
      #     args: >-
      #       -quit
      #       -batchmode
      #       -nographics
      #       -runTests
      #       -testPlatform ${{ matrix.test-mode }}
      #       -testResults ${{ github.workspace }}${{ matrix.test-mode }}Test-Results.xml

      # - name: Release Unity floating license
      #   if: always()
      #   run: |
      #     /opt/unityhub/UnityLicensingClient_V1/Unity.Licensing.Client --return-floating "${{ steps.acquire-license.outputs.LICENSETOKEN }}"

      # - name: Unit Test Report
      #   uses: dorny/test-reporter@v1
      #   if: always()
      #   with:
      #     name: Unit Tests Report
      #     path: ${{ github.workspace }}${{ matrix.test-mode }}Test-Results.xml
      #     reporter: jest-junit

      # - name: Upload artifacts
      #   uses: actions/upload-artifact@v4
      #   if: always()
      #   with:
      #     name: Unit Test Results - ${{ matrix.test-mode }}
      #     path: |
      #       ${{ github.workspace }}${{ matrix.test-mode }}Test-Results.xml
      #       ${{ github.workspace }}/Builds/Logs/${{ matrix.test-mode }}Test-Results-*.log