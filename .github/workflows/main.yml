name: CI/CD Pipeline

on: 
  workflow_dispatch: #workflow dispatch is for manual run from actions page
  push: #on push to our release pipeline branches
    branches:      
      - 'dev'
      - 'release-*'
      - 'hotfix-*'
      - 'main'
  pull_request: #on pull request  

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  determine-app-version:
    name: Determine app version
    runs-on: ubuntu-latest-m
    outputs:
      base-version: ${{ steps.determine-base-version.outputs.BASE_VERSION }}
      build-number: ${{ steps.determine-build-number.outputs.BUILD_NUMBER }}
      version-suffix: ${{ steps.determine-version-suffix.outputs.VERSION_SUFFIX }}
      full-version: ${{ steps.determine-full-version.outputs.FULL_VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine base version
        id: determine-base-version
        run: |
          BASE_VERSION=$(grep 'bundleVersion:' ./ProjectSettings/ProjectSettings.asset | awk '{print $2}')
          
          echo "BASE_VERSION=$BASE_VERSION" >> "$GITHUB_OUTPUT"
          
          echo "Base version: $BASE_VERSION"

      - name: Determine build number
        id: determine-build-number
        run: |
          BUILD_NUMBER="${{ github.run_number }}${{ github.run_attempt }}"
          
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> "$GITHUB_OUTPUT"
          
          echo "Build number: $BUILD_NUMBER"
          
      - name: Determine version suffix
        id: determine-version-suffix
        run: |
          GITHUB_EVENT_NAME="${{ github.event_name }}"
          
          if [[ $GITHUB_EVENT_NAME == 'pull_request' ]]; then
            GITHUB_REF="${{ github.base_ref }}"
          else
            GITHUB_REF="${{ github.ref_name }}"
          fi
          
          if [[ $GITHUB_REF == 'main' ]]; then
            VERSION_SUFFIX="+${{ steps.determine-build-number.outputs.BUILD_NUMBER }}"
          elif [[ $GITHUB_REF =~ ^(release|hotfix)-.* ]]; then
            VERSION_SUFFIX="-rc.${{ steps.determine-build-number.outputs.BUILD_NUMBER }}"
          else
            VERSION_SUFFIX="-dev.${{ steps.determine-build-number.outputs.BUILD_NUMBER }}"
          fi
          
          echo "VERSION_SUFFIX=$VERSION_SUFFIX" >> "$GITHUB_OUTPUT"
          
          echo "Version suffix: $VERSION_SUFFIX"
          
      - name: Determine full version
        id: determine-full-version
        run: |
          FULL_VERSION="${{ steps.determine-base-version.outputs.BASE_VERSION }}${{ steps.determine-version-suffix.outputs.VERSION_SUFFIX }}"
          
          echo "FULL_VERSION=$FULL_VERSION" >> "$GITHUB_OUTPUT"
          
          echo "Full version: $FULL_VERSION"

  run-unit-tests:
    name: Run unit tests in ${{ matrix.test-mode }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test-mode:
          - PlayMode
          - EditMode
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Get Unity version
        id: unity-version
        run: |
          UNITY_VERSION=$(grep "m_EditorVersion:" ProjectSettings/ProjectVersion.txt | awk -F ': ' '{print $2}' | tr -d '\r')
          echo "UNITY_VERSION=${UNITY_VERSION}" >> $GITHUB_OUTPUT

      - name: Cache Unity Library
        uses: actions/cache@v4.1.1
        with:
          path: Library/
          key: Unity-Library-Tests-${{ matrix.test-mode }}-${{ runner.os }}-${{ hashFiles('Packages/**') }}-${{ hashFiles('ProjectSettings/**') }}-${{ hashFiles('Assets/**') }}
          restore-keys: |
            Unity-Library-Tests-${{ matrix.test-mode }}-${{ runner.os }}-${{ hashFiles('Packages/**') }}-${{ hashFiles('ProjectSettings/**') }}
            Unity-Library-Tests-${{ matrix.test-mode }}-${{ runner.os }}-${{ hashFiles('Packages/**') }}
            Unity-Library-Tests-${{ matrix.test-mode }}-${{ runner.os }}

      - name: Cache UPM dependencies
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/upm-cache
          key: upm-cache-${{ inputs.target-platform }}-${{ hashFiles('Packages/manifest.json', 'Packages/packages-lock.json', 'Packages/nuget-packages/NuGet.config', 'Packages/nuget-packages/package.json', 'Packages/nuget-packages/packages.config') }}
          restore-keys: |
            upm-cache-${{ inputs.target-platform }}-

      - name: Cache Unity Installation
        id: cache-unity
        uses: actions/cache@v4
        with:
          path: |
            /opt/unityhub
            /home/runner/Unity/Hub/Editor/${{ steps.unity-version.outputs.UNITY_VERSION }}/Editor
            !/home/runner/Unity/Hub/Editor/${{ steps.unity-version.outputs.UNITY_VERSION }}/Editor/Data/Resources/Licensing
          key: unity-editor-${{ runner.os }}-${{ steps.unity-version.outputs.UNITY_VERSION }}
      
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.x'

      - name: Setup Unity
        if: steps.cache-unity.outputs.cache-hit != 'true'
        id: unity-setup
        uses: buildalon/unity-setup@v1
        with:
          version-file: './ProjectSettings/ProjectVersion.txt'
          modules: linux-server

      - name: Create config directory
        run: |
          sudo mkdir -p /usr/share/unity3d/config/
          sudo chmod 777 /usr/share/unity3d/config/

      - name: Create Unity License Config
        continue-on-error: true
        run: |
            cat << EOF > services-config.json
            {
              "licensingServiceBaseUrl": "http://unity.foresightsports.com:433/",
              "enableEntitlementLicensing": true,
              "hubEnableWorkOffline": true,
              "clientConnectTimeoutSec": 60,
              "clientHandshakeTimeoutSec": 30
            }
            EOF

      - name: Copy config file
        run: |
          sudo cp services-config.json /usr/share/unity3d/config/
          sudo chmod 666 /usr/share/unity3d/config/services-config.json

      - name: Acquire floating license
        run: |
          /opt/unityhub/UnityLicensingClient_V1/Unity.Licensing.Client --acquire-floating
    
      - name: Encode services-config.json to Base64
        id: encode
        run: |
          encoded_config=$(base64 -w 0 services-config.json)
          echo "::set-output name=services_config_base64::$encoded_config"
      
      - name: Activate Unity License
        id: activate-unity-license
        uses: aminayafs/andres-activate-license-test@main
        continue-on-error: true
        with:
          license: buildserverfree
          configuration: ${{ steps.encode.outputs.services_config_base64 }}

      - name: Reset permissions
        if: always()
        run: |
          sudo chmod 755 /usr/share/unity3d/config/
          sudo chmod 644 /usr/share/unity3d/config/services-config.json